// ==UserScript==
// @name        PlayCanvas Code Editor Patch
// @namespace   yaustar
// @match       https://playcanvas.com/editor/code/*
// @grant       none
// @version     0.2
// @author      @yaustar
// @description yaustar's PlayCanvas Code Editor Patch
// ==/UserScript==


(function () {
    const addTypeDefinitions = function (b64, url, doneCallback) {
        fetch(editorApiB64).then((response) => {
            if (response.ok) {
                response.text().then((code) => {
                    monaco.languages.typescript.javascriptDefaults.addExtraLib(code, 'https://editor-api.yau');
                    if (doneCallback) {
                        doneCallback();
                    }
                });
            }
        });
    };

    const onMonaco = function () {
        addTypeDefinitions(editorApiB64, 'https://editor-api.yau', () => { console.log('Added Editor API type definitions'); });
    };

    // Check if Monaco exists
    const codeEditorPoll = setInterval(function () {
        if (window.monaco) {
            onMonaco();
            clearInterval(codeEditorPoll);
        }
    }, 500);

    const editorApiB64 = "data:@file/octet-stream;base64,";
})();
